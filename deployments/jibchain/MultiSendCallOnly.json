{
  "address": "0xD205976DE203ecebBEfC388c1b058c77B9344A0e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "transactions",
          "type": "bytes"
        }
      ],
      "name": "multiSend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21a234a8750519cb47c31fd0f31dc8213f5f44f882c36a932c87cc7ec2f97636",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xF6d422b14a365FD8AbC6126DD08b0029bFa6cb75",
    "contractAddress": null,
    "transactionIndex": 102,
    "gasUsed": "145182",
    "logsBloom": "0x
    "blockHash": "0x2396fde326e5e7f34f706304967c04b045d614371cbe12dd9ad2db0fb6a9aef3",
    "transactionHash": "0x21a234a8750519cb47c31fd0f31dc8213f5f44f882c36a932c87cc7ec2f97636",
    "logs": [],
    "blockNumber": 2629071,
    "cumulativeGasUsed": "5610427",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf606bc4a6ea644bee9a9d15ecf9936d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"multiSend(bytes)\":{\"details\":\"Sends multiple transactions and reverts all if one fails.\",\"params\":{\"transactions\":\"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding\"}}},\"title\":\"Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multiSend(bytes)\":{\"notice\":\"The code is for most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\"}},\"notice\":\"The guard logic is not required here as this contract doesn't support nested delegate calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/MultiSendCallOnly.sol\":\"MultiSendCallOnly\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/MultiSendCallOnly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\\n * @notice The guard logic is not required here as this contract doesn't support nested delegate calls\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract MultiSendCallOnly {\\n    /**\\n     * @dev Sends multiple transactions and reverts all if one fails.\\n     * @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n     *                     operation has to be uint8(0) in this version (=> 1 byte),\\n     *                     to as a address (=> 20 bytes),\\n     *                     value as a uint256 (=> 32 bytes),\\n     *                     data length as a uint256 (=> 32 bytes),\\n     *                     data as bytes.\\n     *                     see abi.encodePacked for more information on packed encoding\\n     * @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\\n     *         but reverts if a transaction tries to use a delegatecall.\\n     * @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n     *         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n     */\\n    function multiSend(bytes memory transactions) public payable {\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // Defaults `to` to `address(this)` if `address(0)` is provided.\\n                to := or(to, mul(iszero(to), address()))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                case 0 {\\n                    success := call(gas(), to, value, data, dataLength, 0, 0)\\n                }\\n                // This version does not allow delegatecalls\\n                case 1 {\\n                    revert(0, 0)\\n                }\\n                if eq(success, 0) {\\n                    let errorLength := returndatasize()\\n                    returndatacopy(0, 0, errorLength)\\n                    revert(0, errorLength)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n        /* solhint-enable no-inline-assembly */\\n    }\\n}\\n\",\"keccak256\":\"0x99e07baaab9bc9c308a7329a50856425357a6c1433a2646310cf5726278ce733\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101a8806100206000396000f3fe60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b6100dc6004803603602081101561003957600080fd5b810190808035906020019064010000000081111561005657600080fd5b82018360208201111561006857600080fd5b8035906020019184600183028401116401000000008311171561008a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506100de565b005b805160205b8181101561016d578083015160f81c6001820184015160601c3081150281179050601583018501516035840186015160558501870160008560008114610130576001811461014057610145565b6000808585888a5af19150610145565b600080fd5b50600081141561015a573d806000803e806000fd5b82605501870196505050505050506100e3565b50505056fea264697066735822122011920990f3608ffd97dd4e6625e354a72d4f0660ee74488b7a60e603eefb285a64736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b6100dc6004803603602081101561003957600080fd5b810190808035906020019064010000000081111561005657600080fd5b82018360208201111561006857600080fd5b8035906020019184600183028401116401000000008311171561008a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506100de565b005b805160205b8181101561016d578083015160f81c6001820184015160601c3081150281179050601583018501516035840186015160558501870160008560008114610130576001811461014057610145565b6000808585888a5af19150610145565b600080fd5b50600081141561015a573d806000803e806000fd5b82605501870196505050505050506100e3565b50505056fea264697066735822122011920990f3608ffd97dd4e6625e354a72d4f0660ee74488b7a60e603eefb285a64736f6c63430007060033",
  "devdoc": {
    "author": "Stefan George - @Georgi87Richard Meissner - @rmeissner",
    "kind": "dev",
    "methods": {
      "multiSend(bytes)": {
        "details": "Sends multiple transactions and reverts all if one fails.",
        "params": {
          "transactions": "Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"
        }
      }
    },
    "title": "Multi Send Call Only - Allows to batch multiple transactions into one, but only calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "multiSend(bytes)": {
        "notice": "The code is for most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise"
      }
    },
    "notice": "The guard logic is not required here as this contract doesn't support nested delegate calls",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}